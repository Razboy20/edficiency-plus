diff --git a/dist/index.mjs b/dist/index.mjs
index f7c0e3e9ee699dacfef05cd3c76f420d40c027d3..a6d5b25a7995b6e5ec6110f84e95c82e0d40bdfb 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,22 +1,22 @@
 import { simple } from 'acorn-walk';
+import { load } from 'cheerio';
 import { createHash } from 'crypto';
 import debug$2 from 'debug';
-import v8 from 'v8';
-import { posix } from 'path';
-import { Subject, filter, ReplaySubject, switchMap, of, startWith, map, mergeMap, firstValueFrom, takeUntil, first, toArray, retry, concatWith, Subscription, buffer } from 'rxjs';
-import fsx from 'fs-extra';
-import { performance } from 'perf_hooks';
-import { rollup } from 'rollup';
 import * as lexer from 'es-module-lexer';
+import fg from 'fast-glob';
+import { existsSync, promises, readFileSync } from 'fs';
+import fsx from 'fs-extra';
 import { readFile as readFile$1 } from 'fs/promises';
+import jsesc from 'jsesc';
 import MagicString from 'magic-string';
-import { createLogger } from 'vite';
-import { readFileSync, existsSync, promises } from 'fs';
 import { createRequire } from 'module';
-import fg from 'fast-glob';
-import { load } from 'cheerio';
-import jsesc from 'jsesc';
+import { posix } from 'path';
+import { performance } from 'perf_hooks';
 import colors from 'picocolors';
+import { rollup } from 'rollup';
+import { ReplaySubject, Subject, Subscription, buffer, concatWith, filter, first, firstValueFrom, map, mergeMap, of, retry, startWith, switchMap, takeUntil, toArray } from 'rxjs';
+import v8 from 'v8';
+import { createLogger } from 'vite';
 
 const pluginName$1 = "crx:optionsProvider";
 const pluginOptionsProvider = (options) => {
@@ -1610,7 +1610,7 @@ function compileFileResources(fileName, {
   assets: /* @__PURE__ */ new Set(),
   css: /* @__PURE__ */ new Set(),
   imports: /* @__PURE__ */ new Set()
-}) {
+}, visited = /* @__PURE__ */ new Set()) {
   const chunk = chunks.get(fileName);
   if (chunk) {
     const { modules, facadeModuleId, imports, dynamicImports } = chunk;
@@ -1618,8 +1618,12 @@ function compileFileResources(fileName, {
       resources.imports.add(x);
     for (const x of dynamicImports)
       resources.imports.add(x);
-    for (const x of [...imports, ...dynamicImports])
-      compileFileResources(x, { chunks, files, config }, resources);
+    for (const x of [...imports, ...dynamicImports]) {
+      if (visited.has(x))
+        continue;
+      visited.add(x);
+      compileFileResources(x, { chunks, files, config }, resources, visited);
+    }
     for (const m of Object.keys(modules))
       if (m !== facadeModuleId) {
         const key = prefix$1("/", relative(config.root, m.split("?")[0]));